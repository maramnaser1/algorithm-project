import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.util.Scanner;

public class BF{
    public static void main(String[] args) {
        try {
            Scanner scan = new Scanner(System.in);
        
            System.out.print("Enter number of seams to remove: ");
            int seamsToRemove = scan.nextInt();
            scan.close();

            // Load input image
            File inputFile = new File("fff.png");
            BufferedImage image = ImageIO.read(inputFile);

            // Show original image size
            System.out.println("Original image size: width = " + image.getWidth() + ", height = " + image.getHeight());

            // Apply Brute Force seam carving
            for (int i = 0; i < seamsToRemove; i++) {
                double[][] energyMatrix = computeEnergyMatrix(image);
                int[] seam = findLowestEnergySeamBF(energyMatrix);
                image = removeSeam(image, seam);
            }

            // Show new image size
            System.out.println("New image size: width = " + image.getWidth() + ", height = " + image.getHeight());

            ImageIO.write(image, "jpg", new File("output_bruteforce11.jpg"));
            System.out.println("✅ Seam carving completed using Brute Force.");
            
        } catch (IOException e) {
            System.out.println("❌ Error processing the image file.");
            e.printStackTrace();
        }
    }

    // --- Compute Energy Matrix ---
    public static double[][] computeEnergyMatrix(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        double[][] energy = new double[height][width];

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                energy[y][x] = computePixelEnergy(image, x, y);
            }
        }
        return energy;
    }

    // --- Compute Pixel Energy (Sobel operator) ---
    private static double computePixelEnergy(BufferedImage image, int x, int y) {
        int[][] brightness = new int[3][3];
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                int newX = x + i;
                int newY = y + j;
                if (newX < 0 || newX >= image.getWidth() || newY < 0 || newY >= image.getHeight()) {
                    brightness[i + 1][j + 1] = 0;
                } else {
                    Color color = new Color(image.getRGB(newX, newY));
                    brightness[i + 1][j + 1] = color.getRed() + color.getGreen() + color.getBlue();
                }
            }
        }

        int xEnergy = brightness[0][0] + 2 * brightness[1][0] + brightness[2][0]
                    - brightness[0][2] - 2 * brightness[1][2] - brightness[2][2];
        int yEnergy = brightness[0][0] + 2 * brightness[0][1] + brightness[0][2]
                    - brightness[2][0] - 2 * brightness[2][1] - brightness[2][2];

        return Math.sqrt(xEnergy * xEnergy + yEnergy * yEnergy);
    }

    // --- Brute Force Seam Finding ---
    public static int[] findLowestEnergySeamBF(double[][] energyMatrix) {
        int height = energyMatrix.length;
        int width = energyMatrix[0].length;
        int[] bestSeam = new int[height];
        double minEnergy = Double.POSITIVE_INFINITY;

        for (int startX = 0; startX < width; startX++) {
            int[] seam = new int[height];
            double seamEnergy = traceSeam(energyMatrix, startX, 0, seam);

            if (seamEnergy < minEnergy || (seamEnergy == minEnergy && startX < bestSeam[0])) {
                minEnergy = seamEnergy;
                System.arraycopy(seam, 0, bestSeam, 0, height);
            }
        }
        return bestSeam;
    }

    private static double traceSeam(double[][] energyMatrix, int x, int y, int[] seam) {
        int height = energyMatrix.length;
        int width = energyMatrix[0].length;
        seam[y] = x;

        if (y == height - 1) {
            return energyMatrix[y][x];
        }

        double minEnergy = Double.POSITIVE_INFINITY;
        for (int dx = -1; dx <= 1; dx++) {
            int nextX = x + dx;
            if (nextX >= 0 && nextX < width) {
                int[] tempSeam = new int[height];
                System.arraycopy(seam, 0, tempSeam, 0, height);
                double nextEnergy = traceSeam(energyMatrix, nextX, y + 1, tempSeam);
                if (nextEnergy < minEnergy) {
                    minEnergy = nextEnergy;
                    System.arraycopy(tempSeam, 0, seam, 0, height);
                }
            }
        }
        return energyMatrix[y][x] + minEnergy;
    }

    // --- Remove Seam ---
    public static BufferedImage removeSeam(BufferedImage image, int[] seam) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage newImage = new BufferedImage(width - 1, height, BufferedImage.TYPE_INT_RGB);

        for (int y = 0; y < height; y++) {
            int newX = 0;
            for (int x = 0; x < width; x++) {
                if (x != seam[y]) {
                    newImage.setRGB(newX, y, image.getRGB(x, y));
                    newX++;
                }
            }
        }
        return newImage;
    }
}

